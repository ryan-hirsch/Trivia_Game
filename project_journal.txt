FRIDAY, APRIL 8, 2022
--------------------

********************
Goal: Make button have a response when clicked
Problem(s): Uncaught TypeError
Status: Resolved
********************

Problem code:

const nextButton = document.getElementById('next-button');

nextButton.addEventListener('click', nextClicked);

function nextClicked() {
    console.log('You did it!')
};

Uncaught TypeError: Cannot read properties of null (reading 'addEventListener')


Troubleshooting:
First things I found when trying to figure out why I was getting this error, was that
the addEventListener was being called on a jQuery object. Didn't know what this meant
but copied their syntax with my specific things and still didn't work.

I was looking at the error again and it was saying that the properties were null.
There are clearly properties in the function in the app.js so why would it say it as null?

So, then I started thinking about how the html/css/js interact when loading this site.
I was thinking that if I just had a app.js file and running something simple like:
console.log('Hello')
this would just run when the script was ran.

Since running the app.js in VSCode was just calling that specific script, I realized
opening my browser that has my html/css/js connected, it was running all those files
when the page is loaded.

This would make sense of why I'm getting a null for properties in my addEventListener

When the page loads, all three are running at the same time-ish so my js script
doesn't get a chance to read my HTML and just runs through the script then comes back
as null because the html hasn't been passed in yet.

So, then I went searching for how to let the html/css load before running the js script.

I didn't understand what I was finding through google searches enough to implement them

This made me go back through my lecture notes and see if this was mentioned anywhere.
I found in my notes from week one that 'defer' was added to the <script> in the HTML
broilerplate.

I added this to my HTML file and reloaded the page and the js script ran perfectly!




********************
Goal: Rebuild index.html
Problem(s): 
Status: Resolved
********************

I made the mistake of deleting my index.html structure in order to isolate my specific
html I was trying to use in my js script from above. Now need to rebuild.

<body>
    <h1>Can It Be More Trivial??</h1>
    <div class = "question-box">
        <div id="question">Question</div>
    </div>
    <div class="answer-buttons">
        <button id="answer-one">Answer 1</button>
        <button id="answer-two">Answer 2</button>
        <button id="answer-three">Answer 3</button>
        <button id="answer-four">Answer 4</button>
    </div>
    <div class="nav-buttons">
        <button id="next-button">Next</button>
        <button id="finish-button">Finish</button>
    </div>
</body>




********************
Goal: Make question/answer arrays in app.js
Problem(s): 
Status: 
********************

const inventory = [
    {question: 'What is 1 + 1?', answers: [{'2', true}, {'5', false}, {'1', false}, {'3', false}]},
    {question: 'What is 2 + 3?', answers: [{'4', false}, {'7', false}, {'9', false}, {'5', true}]},
    {question: 'What is 8 - 1?', answers: [{'6', false}, {'9', false}, {'7', true}, {'2', false}]},
    {question: 'What is 2 * 6?', answers: [{'8', false}, {'12', true}, {'4', false}, {'-4', false}]},
];

const randomQuestion = inventory.sort(() => Math.random())


Excpected a random question to populate the browser page but instead got error:
Uncaught SyntaxError: Unexpected string

Looked back at app.js file and there are red marks under the ','s after my answer and at the '}' after the true/false

Not sure what to do at this point. Going to continue researching.

-----

Looking back at Avengers HW, found syntax:
{ website: 'Gossipcop.com', what: {
    offering: 'creamed corn', location: 'dark'
}
}

-----

const inventory = [
    {
        question: 'What is 1 + 1?',
        answers: [
            {choice: '2', boolean: true},
            {choice: '3', boolean: false},
            {choice: '5', boolean: false},
            {choice: '4', booelan: true}
        ]
    },
    {
        question: 'What is 3 + 5?',
        answers: [
            {choice: '2', boolean: false},
            {choice: '7', boolean: false},
            {choice: '8', boolean: true},
            {choice: '-2', booelan: false}
        ]
    },
    {
        question: 'What is 3 + 1?',
        answers: [
            {choice: '6', boolean: false},
            {choice: '4', boolean: true},
            {choice: '2', boolean: false},
            {choice: '5', booelan: false}
        ]
    },
    {
        question: 'What is 2 * 6?',
        answers: [
            {choice: '-4', boolean: false},
            {choice: '8', boolean: false},
            {choice: '4', boolean: false},
            {choice: '12', booelan: true}
        ]
    }
];


const randomQuestion = inventory.sort(() => Math.random())


Again, expected a random question to populate but it did not. However,
there was no error this time making me think that the array is okay but I'm missing some
sort of event to make it toggle like my next button is doing.

Thinking through my next button code snippet:

    const nextButton = document.getElementById('next-button');
    
        -- this is letting me access this element in my HTML and putting it into a variable nextButton

    nextButton.addEventListener('click', nextClicked);
        -- This is letting me add a DOM event (addEventListener) to my variable therefore my HTML element
            saying the event is a 'click' and when it's clicked, it'll run the function nextClicked

    function nextClicked() {
        console.log('You did it!')
    };
        -- This function will log 'You did it' when called


I'm not quite sure how to make it come up with a question in my array at this point but maybe if I attach
the inventory array to my nextClicked() function, it'll toggle through my inventory array

Going to take away the random feature for the time being to just get through this basic iteration

------

const nextButton = document.getElementById('next-button');

const questionAccess = document.getElementById('question');

const answerAccess = document.getElementById('answer-buttons');

nextButton.addEventListener('click', nextClicked);

function nextClicked() {
    console.log('You did it!')
    displayQuestions()
 };

function displayQuestions() {
    questionAccess.innerText = inventory
}

Okay, so, I went ahead and made variables to assign my elements to so I can access them.

I found in the notion notes that innerText will replace the text I have in my HTML file for that element I called

So, I made a function that would take my question element and replace it with my inventory array and it would
be changing everytime I click next

When the page is loaded, it shows the 'Question' text that is in my HTML file, and when I click the next button,
it changes. However, it's not reading the array and just showing:
[object Object], [object Object], [object Object], [object Object]

This makes me think that my innerText syntax is wrong.

-----










--------------------
MONDAY, APRIL 11, 2022
--------------------

********************
Goal: Get nextClicked function to iterate through questions array 
Problem(s): 
Status: Resolved
********************

